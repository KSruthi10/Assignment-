Breadth-First Search (BFS) â€“ Iterative and Recursive Implementation
#include <bits/stdc++.h>
using namespace std;
 struct Edge 
{
    int source, destination;
};
class Graph
{
public:
        vector<vector<int>> adjList;
     Graph(vector<Edge> const &edges, int Num)
    {
       adjList.resize(Num);
           for (auto &edge: edges)
        {
adjList[edge.source].push_back(edge.destination);     adjList[edge.destination].push_back(edge.source);
        }
    }
};
void recursiveBFS(Graph const &graph, queue<int> &q, vector<bool> &disc)
{
    if (q.empty()) 
{
        return;
    }
    int v = q.front();
    q.pop();
    cout << v << " ";
    for (int u: graph.adjList[v])
    {
        if (!disc[u])
        {
            disc[u] = true;
            q.push(u);
        }
    }
    recursiveBFS(graph, q, disc);
}
int main()
{
    vector<Edge> edges = {
        {1, 2}, {1, 3}, {1, 4}, {2, 5}, {2, 6}, {5, 9},
        {5, 10}, {4, 7}, {4, 8}, {7, 11}, {7, 12}
          };
     int N = 15;
    Graph graph(edges, Num);
  vector<bool> disc(Num, false);
 queue<int> q;
    for (int i = 0; i < Num; i++)
    {
        if (disc[i] == false)
        {
             disc[i] = true;
             q.push(i);
               recursiveBFS(graph, q, disc);
        }
    }
    return 0;
}
